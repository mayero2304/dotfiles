from libqtile import bar, layout, widget
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal

import os
import subprocess
from libqtile import hook

mod = "mod4"
terminal = guess_terminal()
#BARRA ARRIBA
color_barra = "#282a36"
tamaño_barra = 23
fuente_predeterminada = "Ubuntu Nerd Font"
tamaño_fuente = 14
color_activo = "#f1fa8c"
tamaño_icono = 18
color_fg = "#ffffff"
color_bg = "#282a36"
color_inactivo = "#6272a4"
color_oscuro = "#44475a"
color_claro = "#bd93f9"
color_urgent = "#ff5555"
color_texto1 = "#bd93f9"
color_grupo1 = "#ff7f00"
color_grupo2 = "#d600f7"
color_actualizaciones = "#bc0000"
color_grupo3 = "#007bff"
color_grupo4 = "#c60000"


colors = [
    ["#1c1c1c", "#1c1c1c"],  # color 0
    ["#373b41", "#373b41"],  # color 1
    ["#c5c8c6", "#c5c8c6"],  # color 2
    ["#00da0d", "#00da0d"],  # color 3
    ["#5f819d", "#5f819d"],  # color 4
    ["#373b41", "#373b41"],  # color 5
    ["#b294bb", "#b294bb"],  # color 6
    ["#81a2be", "#81a2be"],  # color 7
    ["#e2c5dc", "#e2c5dc"],  # color 8
    ["#5e8d87", "#5e8d87"]]  # color 9

# espacio para definir las funciones
def fc_separador():
    return widget.Sep(
        linewidth=0,
        padding=6,
        foreground=color_fg,
        background=color_bg
    )

    # funcion para dibujar el rectaungulo izquierda y derecha


def fc_rectangulo(vColor, tipo):
    if tipo == 0:
        icono = ""  # nf-ple-left_half_circle_thick
    else:
        icono = ""  # nf-ple-right_half_circle_thick
    return widget.TextBox(
        text=icono,
        fontsize=tamaño_barra + 5,
        foreground=vColor,
        background=color_bg,
        padding=-3
    )


def fc_icono(icono, color_grupo):
    return widget.TextBox(
        text=icono,
        foreground=color_fg,
        background=color_grupo,
        fontsize=tamaño_icono
    )

keys = [
    # A list of available commmands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
    Key([mod], "Return", lazy.spawn("alacritty"), desc="Launch terminal"),
    # Menu
    Key([mod], "m", lazy.spawn("rofi -show drun")),
    #firefox
    Key([mod], "f", lazy.spawn("firefox"), desc="Abrir Firefox"),
    #chromium
    #Key([mod], "c", lazy.spawn("chromium"), desc="Abrir Chromium"),

    #Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "w", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),

     # Control Volumen
    Key([], "XF86AudioRaiseVolume", lazy.spawn(
        "pactl set-sink-volume @DEFAULT_SINK@ +5%")),
    Key([], "XF86AudioLowerVolume", lazy.spawn(
        "pactl set-sink-volume @DEFAULT_SINK@ -5%")),
    Key([], "XF86AudioMute", lazy.spawn(
        "pactl set-sink-mute @DEFAULT_SINK@ toggle")),

    # Brillo pantalla
    Key([], "XF86MonBrightnessUp", lazy.spawn("brightnessctl se +10%")),
    Key([], "XF86MonBrightnessDown", lazy.spawn("brightnessctl se 10%-")),


    # Captura pantallas
    Key([mod], "s", lazy.spawn("scrot")),
    Key([mod, "shift"], "s", lazy.spawn("scrot -s")),

    # Configura el atajo de teclado para cambiar entre pantallas
    Key([mod], "h", lazy.to_screen(1)),
    Key([mod], "l", lazy.to_screen(0)),

 # Combinación de teclas para copiar en Alacritty
    Key([mod], "c", lazy.spawn("echo -n $(cat /dev/clipboard) | xclip -selection clipboard")),

    # Combinación de teclas para pegar en Alacritty
    # Key([mod], "v", lazy.spawn("xdotool type --clearmodifiers --delay 0 '$(xclip -selection clipboard -o)'")),


]
#listado iconos nerd font
#1- nf-linux-archlinux
#2- nf-dev-chrome
#3- nf-dev-visualstudio
#4- nf-seti-db
#5- nf-mdi-folder_open
#6- nf-mdi-forum_outline
#7- nf-fa-slack
#8- nf-linux-docker

#groups = [Group(i) for i in "123456789"]

groups = [Group(i) for i in [
    "  ", "  ", "  ", "  ", " ﱮ  ", "   ", " 󰒱 "
]]

for i, group in enumerate(groups):
    numeroEscritorio = str(i+1)
    keys.extend(
        [
            # mod1 + letter of group = switch to group
            Key(
                [mod],
                numeroEscritorio,
                lazy.group[group.name].toscreen(),
                desc="Switch to group {}".format(group.name),
            ),
            # mod1 + shift + letter of group = switch to & move focused window to group
            Key(
                [mod, "shift"],
                numeroEscritorio,
                lazy.window.togroup(group.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(group.name),
            ),

        ]
    )

# layouts = [
#     layout.Columns(border_focus_stack=["#ffff00", "#8f3d3d"], margin=4),
#     layout.Max(),
#     # Try more layouts by unleashing below layouts.
#     # layout.Stack(num_stacks=2),
#     # layout.Bsp(),
#     # layout.Matrix(),
#     # layout.MonadTall(),
#     # layout.MonadWide(),
#     # layout.RatioTile(),
#     # layout.Tile(),
#     # layout.TreeTab(),
#     # layout.VerticalTile(),
#     # layout.Zoomy(),
# ]

##### DEFAULT THEME SETTINGS FOR LAYOUTS #####
layout_theme = {
        "border_width": 3,
        "margin": 5,
        "border_focus": "e1acff",
        "border_normal": "1D2330"
}

##### THE LAYOUTS #####
layouts = [
    #layout.MonadWide(**layout_theme),
    #layout.Bsp(**layout_theme),
    #layout.Stack(stacks=2, **layout_theme),
    #layout.Columns(**layout_theme),
    #layout.RatioTile(**layout_theme),
    #layout.VerticalTile(**layout_theme),
    #layout.Matrix(**layout_theme),
    #layout.Zoomy(**layout_theme),
    layout.MonadTall(**layout_theme),
    layout.Max(**layout_theme),
    #layout.Tile(shift_windows=True, **layout_theme),
    layout.Stack(num_stacks=2),
    # layout.TreeTab(
    #      font = "Ubuntu",
    #      fontsize = 10,
    #      sections = ["FIRST", "SECOND"],
    #      section_fontsize = 11,
    #      bg_color = "141414",
    #      active_bg = "90C435",
    #      active_fg = "000000",
    #      inactive_bg = "384323",
    #      inactive_fg = "a0a0a0",
    #      padding_y = 5,
    #      section_top = 10,
    #      panel_width = 320
    #      ),
     layout.Floating(**layout_theme)
]

widget_defaults = dict(
    font=fuente_predeterminada,
    fontsize=16,
    padding=1,
    opacity=0.8
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
                widget.GroupBox(
                   font="Ubuntu Nerd Font",
                    fontsize=19,
                    margin_y=2,
                    margin_x=6,
                    padding_y=7,
                    padding_x=2,
                    borderwidth=3,
                    active=color_activo,
                    inactive=color_inactivo,
                    rounded=False,
                    highlight_color=colors[2],
                    highlight_method="block",
                    this_current_screen_border=color_grupo1,
                    block_highlight_text_color=colors[0],
                ),
                fc_separador(),
                 widget.Prompt(
                    background=colors[8],
                    foreground=colors[0],
                    font="Ubuntu Nerd Font",
                    fontsize=18,
                ),
                #  widget.Chord(
                #     chords_colors={
                #         'launch': ("#ff0000", "#ffffff"),
                #     },
                #     name_transform=lambda name: name.upper(),
                # ),
                widget.TextBox(
                    text='\ue0b2',
                    font="Inconsolata for powerline",
                    fontsize='33',
                    padding=0,
                    background=colors[0],
                    foreground=colors[4],
                ),

                widget.TaskList(
                    markup=True,
                    markup_focused='<span background="#005083" foreground="#aaffaa">{}</span>',
                    background=colors[4],
                    border=colors[5],
                    urgent_border=colors[5],
                ),

                widget.TextBox(
                    text='\ue0b0',
                    font="Inconsolata for powerline",
                    fontsize='33',
                    padding=0,
                    background=color_grupo1,
                    foreground=colors[4],
                ),
                widget.Pomodoro(
                    length_pomodori=30,
                    background=color_grupo1,
                    fontsize="12",
                    foreground='#ffffff',
                    color_inactive="#ffffff",
                    color_active="#ffffff"

                ),
                widget.TextBox(
                    text='\ue0b0',
                    font="Inconsolata for powerline",
                    fontsize='33',
                    padding=0,
                    background=color_activo,
                    foreground=color_grupo1,
                ),

                widget.Systray(
                    icon_size=tamaño_icono,
                    background=color_activo,
                    fontsize=20
                ),

                widget.TextBox(
                    text='\ue0be',
                    font="Inconsolata for powerline",
                    fontsize='33',
                    padding=0,
                    background=color_activo,
                    foreground=color_grupo4,
                ),

                # icon calendar
                fc_icono('', color_grupo4),

                widget.TextBox(
                    fontsize=10,
                    padding=0,
                    background=color_grupo4,
                    foreground="#FFFFFF",
                ),


                widget.Clock(
                    font="Inconsolata for powerline",
                    foreground="#FFFFFF",
                    background=color_grupo4,
                    fontsize=14,
                    format='%d %b, %A',
                ),

                widget.Sep(
                    padding=6,
                    linewidth=0,
                    background=color_grupo4,
                ),

                widget.TextBox(
                    text='\ue0be',
                    font="Inconsolata for powerline",
                    fontsize='28',
                    padding=0,
                    background=color_grupo4,
                    foreground=color_grupo3,
                ),
                # reloj
                widget.TextBox(
                    text=' ',
                    font="Inconsolata for powerline",
                    fontsize=tamaño_icono,
                    padding=0,
                    background=color_grupo3,
                    foreground="#FFFFFF",
                ),
                widget.Clock(
                    font="Inconsolata for powerline",
                    foreground="#FFFFFF",
                    background=color_grupo3,
                    padding=0,
                    fontsize=14,
                    format='%I:%M %p'
                ),
                # fc_icono(" ", color_grupo3),
                # widget.PulseVolume(
                #     foreground=color_fg,
                #     background=color_grupo3,
                #     limit_max_volume=True,
                #     fontsize=tamaño_fuente
                # ),

                widget.TextBox(
                    text='\ue0be',
                    font="Inconsolata for powerline",
                    fontsize='33',
                    padding=0,
                    background=color_grupo3,
                    foreground=colors[3],
                ),

                widget.Sep(
                    padding=6,
                    linewidth=0,
                    background=colors[3],
                ),
                widget.QuickExit(background=colors[3], default_text='⏻ ', font="Inconsolata for powerline",
                                 fontsize=28, foreground=colors[0]),
                #widget.CurrentLayout()


            ],
            tamaño_barra,
            background=color_barra,
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"

@hook.subscribe.startup_once
def autostart():
    home = os.path.expanduser('~')
    subprocess.Popen([home + '/.config/qtile/autostart.sh'])
